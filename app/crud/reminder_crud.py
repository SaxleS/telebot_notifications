from abc import ABC, abstractmethod
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional
from motor.motor_asyncio import AsyncIOMotorCollection
from pymongo.results import UpdateResult

import logging
from bson import ObjectId


from app.core.database import get_mongo

notification_collection = get_mongo()["notifications"]


class IReminderRepository(ABC):
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    
    @abstractmethod
    async def create(self, data: Dict[str, Any]) -> Any:
        pass
    
    @abstractmethod
    async def get_all(self, user_id: str) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        pass
    
    @abstractmethod
    async def mark_completed(self, user_id: str, reminder_id: str) -> bool:
        """–û—Ç–º–µ—á–∞–µ—Ç —Ä–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        pass
    
    @abstractmethod
    async def delete(self, user_id: str, reminder_id: str) -> bool:
        pass


class MongoReminderRepository(IReminderRepository):
    """–†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ MongoDB."""
    
    def __init__(self, collection: AsyncIOMotorCollection)  -> None:
        self._collection = collection
    
    async def create(self, data: Dict[str, Any]) -> Any:
        logging.info(f"üìå –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {data}")

        data["timestamp"] = datetime.utcnow()  # –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
        data["completed"] = False  # –§–ª–∞–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        data["status"] = "created"  # –°—Ç–∞—Ç—É—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

        result = await self._collection.insert_one(data)
        logging.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ —Å ID {result.inserted_id}")

        return str(result.inserted_id)
    
    async def get_all(self, user_id: str) -> List[Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        return await self._collection.find({"user_id": user_id, "completed": False}).to_list(None)
    
    async def mark_completed(self, user_id: str, reminder_id: str) -> bool:
        """–ü–æ–º–µ—á–∞–µ—Ç —Ä–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è."""
        reminder = await self._collection.find_one(filter={"_id": ObjectId(oid=reminder_id), "user_id": user_id})
        if not reminder:
            return False
        
        if reminder["recurring"]:  # –ï—Å–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è
            new_date = reminder["date"]

            if reminder["recurring"] == "daily":
                new_date += timedelta(days=1)
            elif reminder["recurring"] == "weekly":
                new_date += timedelta(weeks=1)
            elif reminder["recurring"] == "monthly":
                new_date += timedelta(weeks=4)

            await self._collection.update_one(
                filter={"_id": ObjectId(oid=reminder_id), "user_id": user_id},
                update={"$set": {"date": new_date}}
            )
            return True
        else:  # –†–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            result: UpdateResult = await self._collection.update_one(
                filter={"_id": ObjectId(reminder_id), "user_id": user_id},
                update={"$set": {"completed": True}}
            )
            return result.modified_count > 0
    
    async def delete(self, user_id: str, reminder_id: str) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        result = await self._collection.delete_one(filter={"_id": ObjectId(reminder_id), "user_id": user_id})
        if result.deleted_count > 0:
            await notification_collection.insert_one(document={
                "user_id": user_id,
                "status": "deleted",
                "timestamp": datetime.utcnow()
            })
        return result.deleted_count > 0


# class ReminderService:
#     """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏."""
    
#     def __init__(self, repository: IReminderRepository) -> None:
#         self._repository: IReminderRepository = repository
    
#     async def add_reminder(self, user_id: str, message: str, date: datetime, recurring: Optional[str] = None) -> Any:
#         reminder_data = {
#             "user_id": user_id,
#             "message": message,
#             "date": date,
#             "recurring": recurring
#         }
#         return await self._repository.create(data=reminder_data)
    
#     async def get_all_reminders(self, user_id: str) -> List[Dict[str, Any]]:
#         return await self._repository.get_all(user_id=user_id)
    
#     async def mark_reminder_completed(self, user_id: str, reminder_id: str) -> bool:
#         return await self._repository.mark_completed(user_id=user_id, reminder_id=reminder_id)

#     async def remove_reminder(self, user_id: str, reminder_id: str) -> bool:
#         return await self._repository.delete(user_id=user_id, reminder_id=reminder_id)
    




# class ReminderServiceNotificationMiddleware(ReminderService):
#     """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏."""

#     def __init__(self, repository: MongoReminderRepository) -> None:
#         super().__init__(repository)

#     async def get_all_active_reminders(self) -> List[Dict[str, Any]]:
#         """–ü–æ–ª—É—á–∞–µ—Ç –í–°–ï –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ)."""
#         return await self._repository._collection.find({"completed": False}).to_list(None)

#     async def move_to_next_occurrence(self, reminder_id: str, recurring: str) -> bool:
#         """–ü–µ—Ä–µ–Ω–æ—Å–∏—Ç –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –¥–∞—Ç—É –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏."""
#         reminder = await self._repository._collection.find_one({"_id": ObjectId(oid=reminder_id)})

#         if not reminder or "date" not in reminder:
#             return False  # –ï—Å–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤—ã—Ö–æ–¥–∏–º

#         current_date = reminder["date"]

#         if recurring == "daily":
#             new_date = current_date + timedelta(days=1)
#         elif recurring == "weekly":
#             new_date = current_date + timedelta(weeks=1)
#         elif recurring == "monthly":
#             new_date = current_date + timedelta(weeks=4)
#         else:
#             return False

#         await self._repository._collection.update_one(
#             {"_id": ObjectId(reminder_id)},
#             {"$set": {"date": new_date}}
#         )
#         return True
    
#     async def get_user_timezone(self, user_id: str) -> str:
#         """–ü–æ–ª—É—á–∞–µ—Ç —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
#         user = await users_collection.find_one(filter={"user_id": user_id})
#         return user["timezone"] if user else "UTC"



# reminder_middleware_notification = ReminderServiceNotificationMiddleware(repository=MongoReminderRepository(collection=notification_collection))

# reminder_notification = ReminderService(repository=MongoReminderRepository(collection=notification_collection))