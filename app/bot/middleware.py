import logging
import asyncio
from datetime import datetime
from typing import Any, Dict, List
import pytz
from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from app.dependencies.reminder_dependencies import reminder_middleware_notification

logger: logging.Logger = logging.getLogger(name="app_logger")


class ReminderNotifier:
    """Middleware –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""

    def __init__(self, bot: Bot) -> None:
        self.bot: Bot = bot
        self.is_running = True

    async def start(self) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."""
        while self.is_running:
            try:
                await self.check_reminders()
            except Exception as e:
                logger.error(msg=f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

            await asyncio.sleep(delay=60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É

    async def check_reminders(self) -> None:
            """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å."""
            now: datetime = datetime.now()  # –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞

            reminders: List[Dict[str, Any]] = await reminder_middleware_notification.get_all_active_reminders()  # –ü–æ–ª—É—á–∞–µ–º –í–°–ï –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

            for reminder in reminders:
                user_id = reminder["user_id"]
                reminder_time = reminder["date"]
                reminder_id = str(object=reminder["_id"])
                recurring = reminder.get("recurring", None)

                # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
                user_timezone: str = await reminder_middleware_notification.get_user_timezone(user_id=user_id)
                user_tz: pytz._UTCclass | pytz.StaticTzInfo | pytz.DstTzInfo = pytz.timezone(user_timezone)

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º `naive` datetime –≤ `aware`, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
                if reminder_time.tzinfo is None:
                    reminder_time = user_tz.localize(reminder_time)

                now_local: datetime = now.astimezone(user_tz)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                if now_local >= reminder_time:
                    if recurring:
                        await self.bot.send_message(chat_id=user_id, text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {reminder['message']}")
                        logger.info(msg=f"–ü–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {reminder_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

                        # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –¥–∞—Ç—É –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
                        await reminder_middleware_notification.move_to_next_occurrence(reminder_id=reminder_id, recurring=recurring)
                    else:
                        confirm_button = InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_reminder:{reminder_id}")]
                        ])
                        await self.bot.send_message(chat_id=user_id, text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {reminder['message']}", reply_markup=confirm_button)
                        logger.info(msg=f"–†–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {reminder_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

                        # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç, –µ—Å–ª–∏ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ ‚Üí –∑–∞–≤–µ—Ä—à–∞–µ–º
                        await asyncio.sleep(delay=300)
                        await self.mark_as_completed(reminder_id=reminder_id, recurring=recurring)

    async def mark_as_completed(self, reminder_id: str, recurring: str) -> None:
        """–û—Ç–º–µ—á–∞–µ—Ç —Ä–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ."""
        if not recurring:
            await reminder_middleware_notification.mark_reminder_completed(reminder_id)
            logger.info(msg=f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {reminder_id} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ (—Ç–∞–π–º-–∞—É—Ç).")

    async def handle_confirmation(self, callback_query: CallbackQuery) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'."""
        reminder_id: str = callback_query.data.split(sep=":")[1]

        reminder = await reminder_middleware_notification.get_reminder_by_id(reminder_id)

        if not reminder:
            await callback_query.answer(text="‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)
            return

        recurring = reminder.get("recurring", None)

        await self.mark_as_completed(reminder_id=reminder_id, recurring=recurring)

        await callback_query.message.edit_text("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.")
        await callback_query.answer(text="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ!", show_alert=True)