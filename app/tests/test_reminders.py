import os
import pytest
import json
from datetime import datetime
from unittest.mock import AsyncMock
from bson import ObjectId
from motor.motor_asyncio import AsyncIOMotorCollection
from app.repositories.reminder_repository import MongoReminderRepository
from app.services.remineder_service import ReminderService
from aiogram.types import Message
import pytz

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
TEST_DATA_PATH = os.path.join(BASE_DIR, "test_data.json")

def load_test_data():
    with open(TEST_DATA_PATH, "r", encoding="utf-8") as file:
        return json.load(file)

TEST_DATA = load_test_data()



@pytest.fixture
async def mock_notification_collection():
    """–°–æ–∑–¥–∞—ë—Ç –º–æ–∫ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ MongoDB."""
    mock = AsyncMock(spec=AsyncIOMotorCollection)
    return mock


@pytest.fixture
async def notification_repository(mock_notification_collection):
    """–°–æ–∑–¥–∞—ë—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å –º–æ–∫–æ–º MongoDB."""
    return MongoReminderRepository(mock_notification_collection)


@pytest.fixture
async def reminder_service(notification_repository):
    """–°–æ–∑–¥–∞—ë—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."""
    return ReminderService(notification_repository)


#  –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç: —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è 
@pytest.mark.asyncio
async def test_add_reminder(reminder_service):
    """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
    notification = TEST_DATA["notifications"][0]

    mock_telegram_message = AsyncMock(spec=Message)
    mock_telegram_message.answer = AsyncMock()

    raw_date = notification["date"]["$date"]
    date_obj: datetime = datetime.fromisoformat(raw_date.rstrip("Z")).replace(tzinfo=pytz.utc)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
    print(f"üîç DEBUG: raw_date = {raw_date}, converted_date = {date_obj} (type={type(date_obj)})")

    reminder_service._repository.create = AsyncMock(return_value=ObjectId())


    await reminder_service.add_reminder(
        user_id=notification["user_id"],
        message=notification["message"],
        date=date_obj, 
        recurring=notification["recurring"],
        telegram_message=mock_telegram_message
    )


    reminder_service._repository.create.assert_called_once_with(data={
        "user_id": notification["user_id"],
        "message": notification["message"],
        "date": date_obj, 
        "recurring": notification["recurring"],
    })


    mock_telegram_message.answer.assert_called_once_with(text="‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!")


@pytest.mark.asyncio
async def test_add_past_reminder(reminder_service):
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –ø—Ä–æ—à–ª–æ–º (–æ—à–∏–±–∫–∞)."""
    notification = TEST_DATA["notifications"][1]
    past_date = datetime(2020, 1, 1, 12, 0, 0, tzinfo=pytz.utc)

    # –ú–æ–∫–∞–µ–º `telegram_message`
    mock_telegram_message = AsyncMock(spec=Message)
    mock_telegram_message.answer = AsyncMock()


    now_utc = datetime.now(pytz.utc)


    await reminder_service.add_reminder(
        user_id=notification["user_id"],
        message=notification["message"],
        date=past_date,
        recurring=notification["recurring"],
        telegram_message=mock_telegram_message
    )


    mock_telegram_message.answer.assert_called_once()


    actual_message = mock_telegram_message.answer.call_args.kwargs.get("text", "")


    expected_message_start = "‚ùå –û—à–∏–±–∫–∞! –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º."
    expected_fallback_message = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"


    print(f"\nDEBUG: –§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞:\n{actual_message}")
    print(f"DEBUG: –û–∂–∏–¥–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–∞—á–∞–ª–æ):\n{expected_message_start}")
    print(f"DEBUG: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{expected_fallback_message}")


    assert actual_message.startswith(expected_message_start) or actual_message == expected_fallback_message, (
        f"‚ùå –û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!\n"
        f"–û–∂–∏–¥–∞–µ–º–æ–µ:\n{expected_message_start} ... –∏–ª–∏ {expected_fallback_message}\n"
        f"–§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ:\n{actual_message}"
    )








@pytest.mark.asyncio
async def test_get_all_reminders(reminder_service):
    """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = TEST_DATA["users"][1]["user_id"]
    reminders = TEST_DATA["notifications"]

    reminder_service._repository.get_all = AsyncMock(return_value=reminders)

    result = await reminder_service.get_all_reminders(user_id)

    assert len(result) == 3, "–û–∂–∏–¥–∞–µ–º 3 –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"
    reminder_service._repository.get_all.assert_called_once_with(user_id=user_id)








# –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç: –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
@pytest.mark.asyncio
async def test_get_reminders_for_invalid_user(reminder_service):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–∂–∏–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫)."""
    invalid_user_id = 999999999
    reminder_service._repository.get_all = AsyncMock(return_value=[])

    result = await reminder_service.get_all_reminders(invalid_user_id)

    assert result == [], "–û–∂–∏–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"


# –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç: —É–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è 
@pytest.mark.asyncio
async def test_delete_reminder(reminder_service):
    """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
    reminder_id = str(TEST_DATA["notifications"][2]["_id"])

    reminder_service._repository.delete = AsyncMock(return_value=True)

    result = await reminder_service.remove_reminder(TEST_DATA["users"][2]["user_id"], reminder_id)

    assert result is True, "–û–∂–∏–¥–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"


# –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ—Å—Ç: —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è 
@pytest.mark.asyncio
async def test_delete_invalid_reminder(reminder_service):
    """–¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–æ—à–∏–±–∫–∞)."""
    invalid_reminder_id = str(ObjectId())

    reminder_service._repository.delete = AsyncMock(return_value=False)

    result = await reminder_service.remove_reminder(TEST_DATA["users"][0]["user_id"], invalid_reminder_id)

    assert result is False, "–û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"